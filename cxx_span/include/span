// The template and inlines for the -*- C++ -*- non-owning container access.

// Copyright (C) 2019 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.

// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

/** @file include/cpan
 *  This is a Standard C++ Library header.
 */

#ifndef _GLIBCXX_SPAN
#define _GLIBCXX_SPAN 1

#pragma GCC system_header

#if __cplusplus >= 201703L

#include <cstdint>
#include <cstddef>
#include <type_traits>
#include <limits>
#include <array>
#include <iterator>

namespace std _GLIBCXX_VISIBILITY(default)
{
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  namespace __detail
  {
    // primary template handles types that do not support pre-increment:
    template<typename, typename = std::void_t<>>
      struct __has_size_and_data_members
      : std::false_type
      { };

    // specialization recognizes types that do support pre-increment:
    template<typename _Tp>
      struct __has_size_and_data_members<_Tp,
			std::void_t<decltype(std::declval<_Tp>().data()),
				    decltype(std::declval<_Tp>().size())>>
      : std::true_type
      { };

    template<typename _Tp>
      using __has_size_and_data_members_t
	= typename __has_size_and_data_members<_Tp>::type;

    template<typename _Tp>
      constexpr bool __has_size_and_data_members_v
	= __has_size_and_data_members<_Tp>::value;
  }

  // [views.constants], constants

  inline constexpr std::size_t
  dynamic_extent = std::numeric_limits<std::size_t>::max();

  // [span], class template span

  /**
   * 
   */
  template<typename _Tp, std::size_t _Extent = dynamic_extent>
    class span
    {
    public:

      // constants and types

      using element_type = _Tp;
      using value_type = std::remove_cv_t<_Tp>;
      using index_type = std::size_t;
      using difference_type = std::ptrdiff_t;
      using pointer = element_type*;
      using const_pointer = const element_type*;
      using reference = element_type&;
      using const_reference = const element_type&;
      using iterator = pointer;
      using const_iterator = const pointer;
      using reverse_iterator = std::reverse_iterator<iterator>;
      using const_reverse_iterator = std::reverse_iterator<const_iterator>;

      constexpr static index_type extent = _Extent;

      // [span.cons], span constructors, copy, assignment, and destructor

      constexpr
      span() noexcept
      : _M_data{nullptr}, _M_size{0}
      { static_assert(_Extent == dynamic_extent || _Extent == 0); }

      // FIXME: Ensure Extent == dynamic_extent || Extent == count
      constexpr
      span(pointer __ptr, index_type __count)
      : _M_data(__ptr), _M_size{__count}
      { }

      constexpr
      span(pointer __first, pointer __last)
      : _M_data(__first), _M_size(std::distance(__first, __last))
      { }

      template<size_t _Num>
	constexpr
	span(element_type (&__arr)[_Num])
	: _M_data(__arr), _M_size(_Num)
	{ static_assert(_Extent <= _Num); }

      template<size_t _Num>
	constexpr
	span(std::array<std::remove_const_t<element_type>, _Num>& __arr)
	: _M_data(__arr.data()), _M_size(_Num)
	{ static_assert(_Extent <= _Num); }

      // is_const_v<element_type>
      template<size_t _Num>
	constexpr
	span(const std::array<std::remove_const_t<element_type>, _Num>& __arr)
	: _M_data(__arr.data()), _M_size(__arr.size())
	{ static_assert(_Extent <= _Num); }

      template<typename _Container>
	constexpr
	span(_Container& __cont)
	: _M_data(__cont.data()), _M_size(__cont.size())
	{ static_assert(__detail::__has_size_and_data_members_v<_Container>); }

      template<typename _Container>
	span(const _Container& __cont)
	: _M_data(__cont.data()), _M_size(__cont.size())
	{ static_assert(__detail::__has_size_and_data_members_v<_Container>); }

      constexpr
      span(const span& __other) noexcept = default;

      template<typename _ElementType2, std::size_t _Extent2>
	constexpr
	span(const span<_ElementType2, _Extent2>& __other);

      ~span() noexcept = default;

      constexpr span&
      operator=(const span& __other) noexcept = default;

      // [span.sub], span subviews

      template <ptrdiff_t _Count>
	constexpr span<element_type, _Count>
	first() const
	{
	  using __span_t = span<element_type, _Count>;
	  return __span_t(this->data(), _Count);
	}

      template <ptrdiff_t _Count>
	constexpr span<element_type, _Count>
	last() const
	{
	  using __span_t = span<element_type, _Count>;
	  return __span_t(this->data() + (this->size() - _Count), _Count);
	}

      template <ptrdiff_t _Offset, std::size_t _Count = dynamic_extent>
	constexpr span<element_type, _Count>
	subspan() const
	{
	  using __span_t = span<element_type, _Count>;
	  __span_t(this->data() + _Offset,
		   _Count == dynamic_extent
		   ? this->size() - _Offset
		   : _Count);
	}

      // count >= 0 && count <= size()
      constexpr span<element_type, dynamic_extent>
      first(index_type __count) const
      { return span<element_type>(this->data(), __count); }

      // count >= 0 && count <= size()
      constexpr span<element_type, dynamic_extent>
      last(index_type __count) const
      {
	using __span_t = span<element_type>;
	return __span_t(this->data() + (this->size() - __count), __count);
      }

      // (offset == 0 || offset > 0 && offset < size())
      // && (count == dynamic_extent || count >= 0 && offset + count <= size())
      constexpr span<element_type, dynamic_extent>
      subspan(index_type __offset, index_type __count = dynamic_extent) const
      {
	using __span_t = span<element_type>;
	return __span_t(this->data() + __offset,
			__count == dynamic_extent
			? this->size() - __offset
			: __count);
      }

      // [span.obs], span observers

      constexpr index_type
      size() const noexcept
      { return this->_M_size; }

      constexpr index_type
      size_bytes() const noexcept
      { return this->_M_size * sizeof(element_type); }

      [[nodiscard]] constexpr bool
      empty() const noexcept
      { return this->_M_data == nullptr || this->_M_size == 0; }

      // [span.elem], span element access

      constexpr reference
      operator[](index_type __idx) const
      { return this->_M_data[__idx]; }

      constexpr reference
      front() const
      { return this->_M_data[0]; }

      constexpr reference
      back() const
      { return this->_M_data[this->_M_size - 1]; }

      constexpr pointer
      data() const noexcept
      { return this->_M_data; }

      // [span.iter], span iterator support

      iterator
      begin() const noexcept
      { return this->_M_data; }

      iterator
      end() const noexcept
      { return this->_M_data + this->_M_size; }

      const_iterator
      cbegin() const noexcept
      { return this->_M_data; }

      const_iterator
      cend() const noexcept
      { return this->_M_data + this->_M_size; }

      reverse_iterator
      rbegin() const noexcept
      { return reverse_iterator(this->end()); }

      reverse_iterator
      rend() const noexcept
      { return reverse_iterator(this->begin()); }

      const_reverse_iterator
      crbegin() const noexcept
      { return const_reverse_iterator(this->cend()); }

      const_reverse_iterator
      crend() const noexcept
      { return const_reverse_iterator(this->cbegin()); }

    private:

      pointer _M_data = nullptr;

      index_type _M_size = 0;
  };

  // [span.objectrep], views of object representation

  template<typename _Tp, std::size_t _Extent>
    span<const std::byte, _Extent == dynamic_extent
		   	? dynamic_extent
		  	: sizeof(_Tp) * _Extent>
    as_bytes(span<_Tp, _Extent> __s) noexcept
    { return {reinterpret_cast<const std::byte*>(__s.data()), __s.size_bytes()}; }

  // is_const_v<_Tp> is false
  template<typename _Tp, std::size_t _Extent>
    span<std::byte, _Extent == dynamic_extent
			? dynamic_extent
			:sizeof(_Tp) * _Extent>
    as_writeable_bytes(span<_Tp, _Extent> __s) noexcept
    { return {reinterpret_cast<std::byte*>(__s.data()), __s.size_bytes()}; }

  // Deduction guides.

  template<typename _Tp, std::size_t _Num>
    span(_Tp (&)[_Num])
    -> span<_Tp, _Num>;

  template<typename _Tp, std::size_t _Num>
    span(array<_Tp, _Num>&)
    -> span<_Tp, _Num>;

  template<typename _Tp, std::size_t _Num>
    span(const array<_Tp, _Num>&)
    -> span<const _Tp, _Num>;

  template<typename _Container>
    span(_Container&)
    -> span<typename _Container::value_type>;

  template<typename _Container>
    span(const _Container&)
    -> span<const typename _Container::value_type>;

  // [span.tuple], tuple interface

  template<class _Tp>
    class tuple_size;

  template<typename _Tp, ptrdiff_t _Extent>
    class tuple_size<span<_Tp, _Extent>>
    : integral_constant<size_t, static_cast<size_t>(_Extent)>
    { };

  template <typename _Tp>
    struct tuple_size<span<_Tp, dynamic_extent>>; // Undefined.

  template<size_t _Idx, class _Tp>
    class tuple_element;

  template<size_t _Idx, typename _Tp, ptrdiff_t _Extent>
    struct tuple_element<_Idx, span<_Tp, _Extent>>
    {
      using type = enable_if<_Extent != dynamic_extent
				&& _Idx < static_cast<size_t>(_Extent), _Tp>;
    };

  template<size_t _Idx, typename _Tp, ptrdiff_t _Extent>
    constexpr enable_if<_Extent != dynamic_extent
				&& _Idx < static_cast<size_t>(_Extent), _Tp>&
    get(span<_Tp, _Extent> __sp) noexcept
    { return __sp[_Idx]; }

_GLIBCXX_END_NAMESPACE_VERSION
} // namespace std

#endif // C++20

#endif  /* _GLIBCXX_SPAN */
